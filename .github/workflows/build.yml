name: Check Stuff 👨‍🔧

on:
  merge_group:
  pull_request:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

permissions:
  packages: write
  pages: write
  id-token: write
  contents: read

env:
  nightly: nightly-2025-03-01

jobs:
  validate-swagger:
    runs-on: ubuntu-latest
    name: Validate Swagger

    steps:
      - uses: actions/checkout@v4
      - name: Validate OpenAPI definition
        uses: swaggerexpert/swagger-editor-validate@v1
        with:
          definition-file: swagger.yml

  clippy:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@just
      - uses: rui314/setup-mold@v1
      - name: Install protobuf
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          components: clippy
          cache: true
      - run: just clippy

  format:
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'merge_group' }}
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@just
      - uses: rui314/setup-mold@v1
      - name: Install protobuf
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          components: rustfmt
          cache: true
      - run: just fmt check

  docker:
    name: Docker
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'merge_group' || github.ref == 'refs/heads/master' }}
    env:
      GIT_LFS_SKIP_SMUDGE: 1
      REGISTRY_URL: ghcr.io

    strategy:
      fail-fast: true
      matrix:
        docker:
          [
            { image: chain, context: chain, cache_scope: "chain" },
            { image: webserver, context: webserver, cache_scope: "webserver" },
            { image: block-index-builder, context: block-index, cache_scope: "block-index" },
          ]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/anoma/namada-masp-indexer
          flavor: |
            latest=auto
            prefix=${{ matrix.docker.image }}
            suffix=
          tags: |
            type=ref,event=branch,prefix=${{ matrix.docker.image }}-branch-
            type=ref,event=pr,prefix=${{ matrix.docker.image }}-pr-
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.docker.context }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.docker.cache_scope }}
          cache-to: type=gha,scope=${{ matrix.docker.cache_scope }},mode=max

  can_enqueue:
    needs: [clippy, format, build, validate-swagger]
    if: always() && github.event_name != 'merge_group'
    permissions:
      actions: read
    runs-on: ubuntu-latest
    steps:
      - env:
          NEEDS_JSON: "${{toJSON(needs)}}"
        name: Transform outcomes
        run: |
          echo "ALL_SUCCESS=$(echo "$NEEDS_JSON" | jq '. | to_entries | map([.value.result == "success", .value.result == "skipped"] | any) | all')" >> $GITHUB_ENV
      - name: check outcomes
        run: "[ $ALL_SUCCESS == true ]"

  can_merge:
    needs: [clippy, format, docker, validate-swagger]
    if: always() && github.event_name == 'merge_group'
    permissions:
      contents: read
      pages: write
      actions: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - env:
          NEEDS_JSON: "${{toJSON(needs)}}"
        name: Transform outcomes
        run: |
          echo "ALL_SUCCESS=$(echo "$NEEDS_JSON" | jq '. | to_entries | map([.value.result == "success", .value.result == "skipped"] | any) | all')" >> $GITHUB_ENV
      - name: check outcomes
        run: "[ $ALL_SUCCESS == true ]"
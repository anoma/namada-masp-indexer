//! Retry utilities.

use std::fmt::{Debug, Display};
use std::ops::ControlFlow;

use tokio::time::Duration;

use crate::exit_handle;

/// Retry a future generated by `future_generator`, if it fails.
pub async fn every<F, T, E>(
    duration: Duration,
    mut future_generator: F,
) -> ControlFlow<(), T>
where
    F: AsyncFnMut() -> Result<T, E>,
    E: Display + Debug,
{
    loop {
        match future_generator().await {
            Ok(x) => return ControlFlow::Continue(x),
            Err(e) => {
                if exit_handle::must_exit() {
                    return ControlFlow::Break(());
                }

                let jitter =
                    duration.mul_f64(rand::random_range(0.75f64..=1.25));

                tracing::error!(
                    summary = %e,
                    full = ?e,
                    after = ?jitter,
                    "Retrying execution"
                );

                tokio::time::sleep(jitter).await;
            }
        }
    }
}
